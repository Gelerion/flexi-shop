openapi: 3.1.0
info:
  title: FlexiShop Product Service API
  version: '1.0.0'
  description: API specification for FlexiShop's Product Service.
servers:
  - url: https://api.flexishop.com/v1
    description: Production server
paths:
  /products:
    get:
      tags:
        - Products
      summary: Retrieve a list of products with optional filters
      description: Fetch a paginated list of products with support for filtering by brand, category, price, rating, and tags. You can also sort the results
      operationId: listProducts
      parameters:
        - $ref: '#/components/parameters/IncludeParam'
        # - $ref: '#/components/parameters/SearchQueryParam'
        - $ref: '#/components/parameters/FilterByBrandParam'
        - $ref: '#/components/parameters/FilterByPriceParam'
        - $ref: '#/components/parameters/FilterByRatingParam'
        - $ref: '#/components/parameters/FilterByProductTagParam'
        - $ref: '#/components/parameters/FilterByProductCategoryParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResourcePaginated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Products
      summary: Create a new product
      operationId: createProduct
      requestBody:
        description: Product to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductResource'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResource'
          headers:
            Location:
              description: URL of the created product
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Retrieve a product by ID
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
        - $ref: '#/components/parameters/IncludeParam'
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompositeProductResource'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Products
      summary: Partially update an existing product
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      requestBody:
        description: Fields to update in the product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductResourceUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Products
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      responses:
        '204':
          description: Product deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /products/{productId}/tags/{tagId}:
    put:
      tags:
        - Products
      summary: Assign a tag to a product
      operationId: addTag
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: The name of the brand
      responses:
        '201':
          description: Tag successfully added
  /brands:
    get:
      tags:
        - Brands
      summary: Retrieve a list of brands
      operationId: listBrands
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: A paginated list of brands
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResourcePaginated'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Brands
      summary: Create a new brand
      operationId: createBrand
      requestBody:
        description: Brand to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandResource'
      responses:
        '201':
          description: Brand created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResource'
          headers:
            Location:
              description: URL of the created brand
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /brands/{brandName}:
    parameters:
      - $ref: '#/components/parameters/BrandNameParam'
    get:
      tags:
        - Brands
      summary: Retrieve a brand by name
      operationId: getBrandByName
      responses:
        '200':
          description: Brand details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResource'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /categories:
    get:
      tags:
        - Categories
      summary: Retrieve a list of categories
      operationId: listCategories
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: A paginated list of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResourcePaginated'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Categories
      summary: Create a new category
      operationId: createCategory
      requestBody:
        description: Category to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryResource'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResource'
          headers:
            Location:
              description: URL of the created category
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /categories/{categoryName}:
    parameters:
      - $ref: '#/components/parameters/CategoryNameParam'
    get:
      tags:
        - Categories
      summary: Retrieve a category by name
      operationId: getCategoryByName
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResource'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tags:
    get:
      tags:
        - Tags
      summary: Retrieve a list of tags
      operationId: listTags
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: A paginated list of tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourcePaginated'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Tags
      summary: Create a new tag
      operationId: createTag
      requestBody:
        description: Tag to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResource'
          headers:
            Location:
              description: URL of the created tag
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tags/{tagName}:
    parameters:
      - $ref: '#/components/parameters/TagNameParam'
    get:
      tags:
        - Tags
      summary: Retrieve a tag by name
      operationId: getTagByName
      responses:
        '200':
          description: Tag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResource'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Tags
      summary: Update an existing tag
      operationId: updateTag
      requestBody:
        description: Updated tag
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Tags
      summary: Delete a tag
      operationId: deleteTag
      responses:
        '204':
          description: Tag deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    ProductIdParam:
      name: productId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: The UUID of the product
    BrandNameParam:
      name: brandName
      in: path
      required: true
      schema:
        type: string
      description: The name of the brand
    CategoryNameParam:
      name: categoryName
      in: path
      required: true
      schema:
        type: string
      description: The name of the category
    TagNameParam:
      name: tagName
      in: path
      required: true
      schema:
        type: string
      description: The name of the tag
    IncludeParam:
      name: include
      in: query
      description: >
        Comma-separated list of related resources to include. Possible values: `brands`, `tags`, `categories`
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - brands
            - tags
            - categories
        style: form
        explode: false
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Maximum number of items to return
    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of items to skip before starting to collect the result set
    SearchQueryParam:
      name: q
      in: query
      schema:
        type: string
      description: Search query string
    FilterByPriceParam:
      name: price
      in: query
      schema:
        type: string
        default: 'lte:1000'
        examples:
          - '10-20'
          - 'gt:10'
          - '10'
      description: |
        Specifies the price filter criteria. Supports:
        - Range filters, e.g., `10-50`
        - Comparison operators such as `lte:1000` (less than or equal to 1000) or `gte:50` 
         (greater than or equal to 50).
         Example: `gte:10` filters for prices greater than or equal to 10.
    FilterByRatingParam:
      name: rating
      in: query
      schema:
        type: string
        default: 'gte:3'
        examples:
          - '0-5'
          - 'gte:10'
          - '3'
      description: Specifies rating filter criteria. Supports both range filters (e.g., `0-5`) and comparison operators (`gte`, `lte`). For example, `gte:3` filters ratings greater than or equal to 3.
    FilterByBrandParam:
      name: brand
      in: query
      explode: false
      schema:
        type: array
        items:
          type: string
          examples:
            - 'Logitech'
      description: Filters by brand(s)
    FilterByProductTagParam:
      name: product[tag]
      in: query
      explode: false
      schema:
        type: array
        items:
          type: string
          examples:
            - 'wireless'
      description: Filters by tag(s)
    FilterByProductCategoryParam:
      name: product[category]
      in: query
      explode: false
      schema:
        type: array
        items:
          type: string
          examples:
            - 'Accessories'
      description: Filters by tag(s)
    SortByParam:
      name: sort_by
      in: query
      explode: false
      schema:
        type: array
        items:
          type: string
          pattern: '^[a-zA-Z0-9_]+:(asc|desc)$'
          examples:
            - 'price:asc'
            - 'name:desc'
      description: Sorting fields and order. Each value must be in the format `field:asc` or `field:desc`
  schemas:
    CreateProductResource:
      allOf:
        - $ref: '#/components/schemas/ProductResource'
        - $ref: '#/components/schemas/ProductResourceSubResources'
    CompositeProductResource:
      anyOf:
        - $ref: '#/components/schemas/ProductResource'
        - $ref: '#/components/schemas/ProductResourceSubResources'
    ProductResource:
      type: object
      required:
        - name
        - description
        - price
        - status
        - inventoryQuantity
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          examples:
            - '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          maxLength: 255
          x-field-extra-annotation: "@NotNull\n@Size(min=1, max=255)"
          examples:
            - 'Wireless Mouse'
        description:
          type: string
          x-field-extra-annotation: "@NotNull"
          examples:
            - 'A high-quality wireless mouse with ergonomic design.'
        brand:
          type: string
          examples:
            - 'Logitech'
        price:
          type: number
          format: float
          minimum: 0.0
          x-field-extra-annotation: "@NotNull"
          examples:
            - 29.99
        status:
          type: string
          enum: [active, inactive, discontinued]
          default: active
          examples:
            - 'active'
        inventoryQuantity:
          type: integer
          minimum: 0
          default: 0
          examples:
            - 150
        createdAt:
          type: string
          format: date-time
          readOnly: true
          examples:
            - '2023-10-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          examples:
            - '2023-10-02T12:00:00Z'
    ProductResourceSubResources:
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
          examples: ['Electronics', 'Accessories']
        tags:
          type: array
          items:
            type: string
          examples: ['wireless', 'mouse']
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageResource'
        specifications:
          type: array
          items:
            $ref: '#/components/schemas/SpecificationResource'
    ProductResourceUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          examples: ['Wireless Mouse']
        description:
          type: string
          examples: ['An updated description.']
        brand:
          type: string
          examples: ['Logitech']
        price:
          type: number
          format: float
          minimum: 0.0
          examples: [29.99]
        status:
          type: string
          enum: [active, inactive, discontinued]
          examples: ['inactive']
        inventoryQuantity:
          type: integer
          minimum: 0
          examples: [120]
        categories:
          type: array
          items:
            type: string
          examples: ['Electronics', 'Accessories']
        tags:
          type: array
          items:
            type: string
          examples: ['wireless', 'mouse']
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageResource'
        specifications:
          type: array
          items:
            $ref: '#/components/schemas/SpecificationResource'
    ProductResourcePaginated:
      type: object
      required:
        - totalItems
        - items
      properties:
        totalItems:
          type: integer
          examples: [100]
        items:
          type: array
          items:
            $ref: '#/components/schemas/CompositeProductResource'
          examples:
            - id: "123e4567-e89b-12d3-a456-426614174000"
              name: "Wireless Mouse"
              description: "A high-quality wireless mouse with ergonomic design."
              brand: "Logitech"
              price: 29.99
              status: "active"
              inventoryQuantity: 150
              createdAt: "2023-10-01T12:00:00Z"
              updatedAt: "2023-10-02T12:00:00Z"
    BrandResource:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          examples: [2]
        name:
          type: string
          maxLength: 255
          examples: ['Logitech']
        description:
          type: string
          examples: ['A leading manufacturer of computer peripherals.']
        createdAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-01T12:00:00Z']
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-02T12:00:00Z']
    BrandResourcePaginated:
      type: object
      required:
        - totalItems
        - items
      properties:
        totalItems:
          type: integer
          examples: [20]
        items:
          type: array
          items:
            $ref: '#/components/schemas/BrandResource'
    CategoryResource:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          examples: [3]
        name:
          type: string
          maxLength: 255
          x-field-extra-annotation: "@NotNull\n@Size(min=1, max=255)"
          examples: ['Electronics']
        parent:
          type: string
          examples: ['Technology']
        createdAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-01T12:00:00Z']
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-02T12:00:00Z']
    CategoryResourcePaginated:
      type: object
      required:
        - totalItems
        - items
      properties:
        totalItems:
          type: integer
          examples: [15]
        items:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResource'
    TagResource:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          examples: [4]
        name:
          type: string
          maxLength: 255
          examples: ['wireless']
        createdAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-01T12:00:00Z']
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-02T12:00:00Z']
    TagResourcePaginated:
      type: object
      required:
        - totalItems
        - items
      properties:
        totalItems:
          type: integer
          examples: [50]
        items:
          type: array
          items:
            $ref: '#/components/schemas/TagResource'
    ImageResource:
      type: object
      required:
        - imageUrl
        - isPrimary
      properties:
        id:
          type: integer
          readOnly: true
          examples: [10]
        imageUrl:
          type: string
          format: uri
          examples: ['https://cdn.flexishop.com/images/product1.jpg']
        isPrimary:
          type: boolean
          default: false
          examples: [true]
        createdAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-01T12:00:00Z']
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-02T12:00:00Z']
    SpecificationResource:
      type: object
      required:
        - name
        - value
      properties:
        id:
          type: integer
          readOnly: true
          examples: [5]
        name:
          type: string
          maxLength: 255
          examples: ['Battery Life']
        value:
          type: string
          maxLength: 255
          examples: ['Up to 12 months']
        createdAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-01T12:00:00Z']
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          examples: ['2023-10-02T12:00:00Z']
    ProductNestedResourcesCriteria:
      type: object
      properties:
        category:
          type: array
          items:
            type: string
          examples:
            - electronics
            - accessories
        tag:
          type: array
          items:
            type: string
          examples:
            - keyboard
            - ergonomic
      additionalProperties: false
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          examples: ['2023-10-03T15:23:01.456+00:00']
        status:
          type: integer
          examples: [400]
        error:
          type: string
          examples: ['Bad Request']
        message:
          type: string
          examples: ['Validation failed for object=`productResource`. Error count: 1']
        path:
          type: string
          examples: ['/api/v1/products']
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
security:
  - BearerAuth: []